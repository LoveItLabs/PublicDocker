  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    # for UNIX domain socket setups:
    #
    # If you ever want to switch back to unicorn uncomment this socket.
    server unix:/app/public/../tmp/sockets/unicorn.sock fail_timeout=1;

    #Sockets for thin servers. Configure this also  in supervisord.conf
     server   unix:/app/tmp/thin.0.sock;
     server   unix:/app/tmp/thin.1.sock;
     server   unix:/app/tmp/thin.2.sock;
     server   unix:/app/tmp/thin.3.sock; 
  }
  server {

    listen 80 default deferred; # for Linux

    client_max_body_size 2G;

    #FIXME: --add a proper server name directive in the vhost. 
    server_name demoapp.example.com ;
    #server_name  _;
    
    keepalive_timeout 5;


    # path for static files
    root /app/public;

    ############# Log to Stdout- this is a 12 factor app afterall. 
    error_log /dev/stdout;
    access_log /dev/stdout;

    # Prefer to serve static files directly from nginx to avoid unnecessary
    # data copies from the application server.
    #
    # try_files directive appeared in in nginx 0.7.27 and has stabilized
    # over time.  Older versions of nginx (e.g. 0.6.x) requires
    # "if (!-f $request_filename)" which was less efficient:
    # http://bogomips.org/unicorn.git/tree/examples/nginx.conf?id=v3.3.1#n127
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      # an HTTP header important enough to have its own Wikipedia entry:
      #   http://en.wikipedia.org/wiki/X-Forwarded-For

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;


      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application

      proxy_set_header Host $http_host;
      proxy_set_header X-Request-Start "t=${msec}";


      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll/streaming.  It's also safe to set if you're using
      # only serving fast clients with Unicorn + nginx, but not slow
      # clients.  You normally want nginx to buffer responses to slow
      # clients, even with Rails 3.1 streaming because otherwise a slow
      # client can become a bottleneck of Unicorn.
      #
      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.
      # proxy_buffering off;

      proxy_pass http://app_server;
    }

        # Rails error pages
    error_page 500 502 503 504 /500.html;
 }